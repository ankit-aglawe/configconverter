{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"ConfigConverter","text":"<p>A versatile tool to convert configuration files between different formats.</p> <p> </p>"},{"location":"#introduction","title":"Introduction","text":"<p>ConfigConverter is a powerful and easy-to-use tool for converting configuration files between various formats, including JSON, YAML, TOML, INI, and XML.</p> <ul> <li>GitHub Repository: github.com/ankitaglawe/configconverter</li> <li>PyPI Package: pypi.org/project/configconverter</li> </ul>"},{"location":"#features","title":"Features","text":"<ul> <li>Supports multiple configuration formats.</li> <li>Command-line interface and Python API.</li> <li>Easy integration into existing workflows.</li> <li>Extensible and customizable.</li> </ul>"},{"location":"#quick-start","title":"Quick Start","text":"<p>Get started by installing ConfigConverter and converting your first file.</p> <pre><code>pip install configconverter\nconfigconverter config.json config.yaml\n</code></pre> <p>See the Installation and Usage sections for more details.</p>"},{"location":"api/","title":"Python API Reference","text":"<p>Detailed documentation of the Python API.</p>"},{"location":"api/#convert-function","title":"<code>convert</code> Function","text":"<pre><code>convert(\n    input_data: str,\n    input_format: str,\n    output_format: str,\n    output_file: Optional[str] = None,\n    indent: int = 4,\n    from_file: bool = True,\n    **options: Any\n) -&gt; Optional[str]\n</code></pre>"},{"location":"api/#parameters","title":"Parameters","text":"<ul> <li>input_data (str): Input data as a string or file path.</li> <li>input_format (str): Format of the input data.</li> <li>output_format (str): Desired output format.</li> <li>output_file (str, optional): Path to save the output data. If <code>None</code>, the function returns the output data as a string.</li> <li>indent (int, optional): Indentation level for the output data. Defaults to <code>4</code>.</li> <li>from_file (bool, optional): Indicates if <code>input_data</code> is a file path (<code>True</code>) or a data string (<code>False</code>). Defaults to <code>True</code>.</li> <li>**options: Additional options for parsers or emitters.</li> </ul>"},{"location":"api/#returns","title":"Returns","text":"<ul> <li>str or None: Output data as a string if <code>output_file</code> is <code>None</code>; otherwise, <code>None</code>.</li> </ul>"},{"location":"api/#raises","title":"Raises","text":"<ul> <li>ConversionError: If an error occurs during conversion.</li> <li>UnsupportedFormatError: If the specified format is not supported.</li> </ul>"},{"location":"api/#example","title":"Example","text":"<pre><code>from configconverter import convert\n\n# Convert JSON string to YAML string\njson_data = '{\"name\": \"Alice\", \"age\": 25}'\nyaml_data = convert(json_data, 'json', 'yaml', from_file=False)\nprint(yaml_data)\n</code></pre>"},{"location":"changelog/","title":"Changelog","text":"<p>All notable changes to this project will be documented in this file.</p>"},{"location":"changelog/#010-2024-10-08","title":"[0.1.0] - 2024-10-08","text":""},{"location":"changelog/#added","title":"Added","text":"<ul> <li>Initial release of ConfigConverter.</li> <li>Support for JSON, YAML, TOML, INI, and XML formats.</li> <li>Command-line interface and Python API.</li> <li>Basic unit tests for parsers and emitters.</li> </ul>"},{"location":"cli/","title":"Command-Line Interface","text":"<p>Detailed documentation of the command-line interface.</p>"},{"location":"cli/#syntax","title":"Syntax","text":"<pre><code>configconverter [OPTIONS] INPUT_FILE [OUTPUT_FILE]\n</code></pre>"},{"location":"cli/#options","title":"Options","text":""},{"location":"cli/#-i-input-format-format","title":"<code>-i, --input-format FORMAT</code>","text":"<p>Specify the format of the input file. Supported formats:</p> <ul> <li><code>json</code></li> <li><code>yaml</code></li> <li><code>toml</code></li> <li><code>ini</code></li> <li><code>xml</code></li> </ul>"},{"location":"cli/#-o-output-format-format","title":"<code>-o, --output-format FORMAT</code>","text":"<p>Specify the format of the output file. Supported formats are the same as input formats.</p>"},{"location":"cli/#-indent-n","title":"<code>--indent N</code>","text":"<p>Set indentation level for the output file (default is 4).</p>"},{"location":"cli/#-overwrite","title":"<code>--overwrite</code>","text":"<p>Overwrite the output file if it exists without prompting.</p>"},{"location":"cli/#-stdout","title":"<code>--stdout</code>","text":"<p>Print the output to standard output instead of writing to a file.</p>"},{"location":"cli/#-pretty","title":"<code>--pretty</code>","text":"<p>Pretty-print the output with default indentation (indent=4).</p>"},{"location":"cli/#-v-version","title":"<code>-v, --version</code>","text":"<p>Show the version of ConfigConverter and exit.</p>"},{"location":"cli/#-h-help","title":"<code>-h, --help</code>","text":"<p>Show the help message and exit.</p>"},{"location":"cli/#examples","title":"Examples","text":"<p>Convert INI to TOML:</p> <pre><code>configconverter -i ini -o toml settings.ini settings.toml\n</code></pre> <p>Convert XML to JSON and print to stdout:</p> <pre><code>configconverter config.xml -o json --stdout\n</code></pre> <p>Overwrite existing file without prompting:</p> <pre><code>configconverter config.yaml config.json --overwrite\n</code></pre>"},{"location":"contributing/","title":"Contributing","text":"<p>Thank you for considering contributing to ConfigConverter!</p>"},{"location":"contributing/#how-to-contribute","title":"How to Contribute","text":"<ol> <li> <p>Fork the Repository: Click on the \"Fork\" button at the top right of the repository page.</p> </li> <li> <p>Clone Your Fork:</p> </li> </ol> <pre><code>git clone https://github.com/yourusername/configconverter.git\n</code></pre> <ol> <li>Create a Branch:</li> </ol> <pre><code>git checkout -b feature/your-feature-name\n</code></pre> <ol> <li> <p>Make Your Changes: Implement your feature or bug fix.</p> </li> <li> <p>Write Tests: Ensure your changes are covered by tests.</p> </li> <li> <p>Commit Your Changes:</p> </li> </ol> <pre><code>git commit -am 'Add new feature'\n</code></pre> <ol> <li>Push to Your Fork:</li> </ol> <pre><code>git push origin feature/your-feature-name\n</code></pre> <ol> <li>Submit a Pull Request: Go to the original repository and submit a pull request.</li> </ol>"},{"location":"contributing/#code-style","title":"Code Style","text":"<ul> <li>Follow PEP 8 guidelines.</li> <li>Use type hints where appropriate.</li> <li>Write docstrings for all public modules, classes, and functions.</li> </ul>"},{"location":"contributing/#reporting-issues","title":"Reporting Issues","text":"<p>If you encounter any issues, please open an issue on GitHub with detailed information.</p>"},{"location":"examples/","title":"Examples","text":"<p>Real-world examples of using ConfigConverter.</p>"},{"location":"examples/#batch-conversion","title":"Batch Conversion","text":"<p>Convert all JSON files in a directory to YAML.</p> <pre><code>import os\nfrom configconverter import convert\n\ninput_dir = 'json_configs'\noutput_dir = 'yaml_configs'\nos.makedirs(output_dir, exist_ok=True)\n\nfor filename in os.listdir(input_dir):\n    if filename.endswith('.json'):\n        input_file = os.path.join(input_dir, filename)\n        output_file = os.path.join(output_dir, filename.replace('.json', '.yaml'))\n        convert(input_file, 'json', 'yaml', output_file=output_file)\n</code></pre>"},{"location":"examples/#custom-indentation","title":"Custom Indentation","text":"<p>Convert a file with custom indentation.</p> <pre><code>configconverter config.json config.yaml --indent 2\n</code></pre>"},{"location":"examples/#using-in-a-python-script","title":"Using in a Python Script","text":"<p>Integrate ConfigConverter into your Python application.</p> <pre><code>from configconverter import convert\n\ndef convert_config(input_path: str, output_path: str):\n    convert(input_path, 'toml', 'ini', output_file=output_path)\n\nif __name__ == '__main__':\n    convert_config('settings.toml', 'settings.ini')\n</code></pre>"},{"location":"installation/","title":"Installation","text":""},{"location":"installation/#requirements","title":"Requirements","text":"<ul> <li>Python 3.8 or higher.</li> </ul>"},{"location":"installation/#install-from-pypi","title":"Install from PyPI","text":"<p>Install ConfigConverter using pip:</p> <pre><code>pip install configconverter\n</code></pre>"},{"location":"installation/#install-from-source","title":"Install from Source","text":"<p>Clone the repository and install:</p> <pre><code>git clone https://github.com/ankitaglawe/configconverter.git\ncd configconverter\npoetry install\n</code></pre> <p>Ensure that the <code>configconverter</code> command is available:</p> <pre><code>configconverter --help\n</code></pre>"},{"location":"license/","title":"License","text":"<p>MIT License</p>"},{"location":"usage/","title":"Usage","text":"<p>ConfigConverter can be used both as a command-line tool and as a Python library.</p>"},{"location":"usage/#command-line-interface","title":"Command-Line Interface","text":""},{"location":"usage/#basic-syntax","title":"Basic Syntax","text":"<pre><code>configconverter [OPTIONS] INPUT_FILE [OUTPUT_FILE]\n</code></pre>"},{"location":"usage/#options","title":"Options","text":"<ul> <li><code>-i, --input-format FORMAT</code> : Specify the format of the input file.</li> <li><code>-o, --output-format FORMAT</code>: Specify the format of the output file.</li> <li><code>--indent N</code>               : Set indentation level for output file.</li> <li><code>--overwrite</code>              : Overwrite the output file if it exists.</li> <li><code>--stdout</code>                 : Print output to stdout instead of a file.</li> <li><code>--pretty</code>                 : Pretty-print the output (indent=4).</li> <li><code>-v, --version</code>            : Show the version and exit.</li> <li><code>-h, --help</code>               : Show help message and exit.</li> </ul>"},{"location":"usage/#examples","title":"Examples","text":"<p>Convert <code>config.json</code> to <code>config.yaml</code>:</p> <pre><code>configconverter config.json config.yaml\n</code></pre> <p>Specify formats explicitly:</p> <pre><code>configconverter -i ini -o toml settings.conf settings.toml\n</code></pre> <p>Output to standard output:</p> <pre><code>configconverter config.toml -o json --stdout\n</code></pre>"},{"location":"usage/#python-library","title":"Python Library","text":"<p>Import the <code>convert</code> function from the <code>configconverter</code> module.</p>"},{"location":"usage/#basic-usage","title":"Basic Usage","text":"<pre><code>from configconverter import convert\n\n# Convert using file paths\nconvert('config.json', 'json', 'yaml', output_file='config.yaml')\n\n# Convert using data strings\njson_data = '{\"name\": \"John\", \"age\": 30}'\nyaml_data = convert(json_data, 'json', 'yaml', from_file=False)\nprint(yaml_data)\n</code></pre>"},{"location":"usage/#parameters","title":"Parameters","text":"<ul> <li><code>input_data</code> (str): Input data as a string or file path.</li> <li><code>input_format</code> (str): Format of the input data.</li> <li><code>output_format</code> (str): Desired output format.</li> <li><code>output_file</code> (str, optional): Path to save the output data.</li> <li><code>indent</code> (int, optional): Indentation level for the output data. Defaults to 4.</li> <li><code>from_file</code> (bool, optional): Indicates if <code>input_data</code> is a file path. Defaults to True.</li> <li><code>**options</code>: Additional options for parsers or emitters.</li> </ul>"}]}